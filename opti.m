function [x, fval, sharpe, portfolio_returns, mu, sigma] = opti(prices, returns, pffs, ...
    call_prices, call_returns, call_pffs, ...
    put_prices, put_returns, put_pffs, ...
    amp_prices, amp_returns, amp_pffs, ...
    max_prices, max_returns, max_pffs, ...
    min_prices, min_returns, min_pffs)

num_eu_options = size(call_prices);
num_eu = num_eu_options(1);
num_stocks = num_eu_options(2);

A_calls = [call_prices(1,:) call_prices(2,:) ...
    call_prices(3,:) call_prices(4,:)...
    call_prices(5,:) call_prices(6,:) call_prices(7,:), ...
    call_prices(8,:)];
A_puts = [put_prices(1,:) put_prices(2,:) ...
    put_prices(3,:) put_prices(4,:)...
    put_prices(5,:) put_prices(6,:) put_prices(7,:), ...
    put_prices(8,:)];
A = [prices' A_calls A_puts amp_prices max_prices min_prices];

f_calls = [call_returns(1,:) call_returns(2,:) ...
    call_returns(3,:) call_returns(4,:)...
    call_returns(5,:) call_returns(6,:) call_returns(7,:), ...
    call_returns(8,:)];
f_puts = [put_returns(1,:) put_returns(2,:) ...
    put_returns(3,:) put_returns(4,:)...
    put_returns(5,:) put_returns(6,:) put_returns(7,:), ...
    put_returns(8,:)];
f = [returns f_calls f_puts amp_returns max_returns min_returns];

b = 100000;

lb = [zeros(1, num_stocks) -8 * ones(1, num_stocks * (num_eu * 2 + 3))];
ub = [10 * ones(1, num_stocks) 10 * ones(1, num_stocks * (num_eu * 2 + 3))];

[x, fval]= linprog(f, A, b, [], [],lb, ub);
% [x, fval]= linprog(f, A, b, [], [],lb);
cost = A * x;

P_calls = [squeeze(call_pffs(1, :, :))' squeeze(call_pffs(2, :, :))' ...
    squeeze(call_pffs(3, :, :))' squeeze(call_pffs(4, :, :))'...
    squeeze(call_pffs(5, :, :))' squeeze(call_pffs(6, :, :))' ...
    squeeze(call_pffs(7, :, :))', squeeze(call_pffs(8, :, :))'];
P_puts = [squeeze(put_pffs(1, :, :))' squeeze(put_pffs(2, :, :))' ...
    squeeze(put_pffs(3, :, :))' squeeze(put_pffs(4, :, :))'...
    squeeze(put_pffs(5, :, :))' squeeze(put_pffs(6, :, :))' ...
    squeeze(put_pffs(7, :, :))', squeeze(put_pffs(8, :, :))'];

P = [pffs' P_calls P_puts amp_pffs max_pffs min_pffs];

future_p = x' * P';
portfolio_returns = (future_p - cost)/cost;
mu = mean(portfolio_returns);
sigma = std(portfolio_returns);
sharpe = mu/sigma;







